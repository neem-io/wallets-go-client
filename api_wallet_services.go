/*
Wallet

Integrate Neem Wallet APIs into your ecosystem to provide your customer the ability to create wallets, set up a financial PIN, ability to manage their wallets and have on request visibility over their balances.

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// WalletServicesApiService WalletServicesApi service
type WalletServicesApiService service

type ApiAccountLookupRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	walletId string
	endToEndIdentification *string
	schemeName *string
	xNeemCNIC *string
	xNeemPartnerId *string
	contentType *string
}

func (r ApiAccountLookupRequest) EndToEndIdentification(endToEndIdentification string) ApiAccountLookupRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiAccountLookupRequest) SchemeName(schemeName string) ApiAccountLookupRequest {
	r.schemeName = &schemeName
	return r
}

func (r ApiAccountLookupRequest) XNeemCNIC(xNeemCNIC string) ApiAccountLookupRequest {
	r.xNeemCNIC = &xNeemCNIC
	return r
}

func (r ApiAccountLookupRequest) XNeemPartnerId(xNeemPartnerId string) ApiAccountLookupRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiAccountLookupRequest) ContentType(contentType string) ApiAccountLookupRequest {
	r.contentType = &contentType
	return r
}

func (r ApiAccountLookupRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AccountLookupExecute(r)
}

/*
AccountLookup Account Lookup

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiAccountLookupRequest
*/
func (a *WalletServicesApiService) AccountLookup(ctx context.Context, walletId string) ApiAccountLookupRequest {
	return ApiAccountLookupRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) AccountLookupExecute(r ApiAccountLookupRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.AccountLookup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/account/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endToEndIdentification == nil {
		return localVarReturnValue, nil, reportError("endToEndIdentification is required and must be specified")
	}
	if r.schemeName == nil {
		return localVarReturnValue, nil, reportError("schemeName is required and must be specified")
	}
	if r.xNeemCNIC == nil {
		return localVarReturnValue, nil, reportError("xNeemCNIC is required and must be specified")
	}

	localVarQueryParams.Add("EndToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	localVarQueryParams.Add("SchemeName", parameterToString(*r.schemeName, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	localVarHeaderParams["X-Neem-CNIC"] = parameterToString(*r.xNeemCNIC, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAccountUpgradeRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	walletId string
	xNeemPartnerId *string
	xNeemID *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiAccountUpgradeRequest) XNeemPartnerId(xNeemPartnerId string) ApiAccountUpgradeRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiAccountUpgradeRequest) XNeemID(xNeemID string) ApiAccountUpgradeRequest {
	r.xNeemID = &xNeemID
	return r
}

func (r ApiAccountUpgradeRequest) ContentType(contentType string) ApiAccountUpgradeRequest {
	r.contentType = &contentType
	return r
}

func (r ApiAccountUpgradeRequest) Body(body map[string]interface{}) ApiAccountUpgradeRequest {
	r.body = &body
	return r
}

func (r ApiAccountUpgradeRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.AccountUpgradeExecute(r)
}

/*
AccountUpgrade Account Upgrade

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiAccountUpgradeRequest
*/
func (a *WalletServicesApiService) AccountUpgrade(ctx context.Context, walletId string) ApiAccountUpgradeRequest {
	return ApiAccountUpgradeRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) AccountUpgradeExecute(r ApiAccountUpgradeRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.AccountUpgrade")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/upgrade/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemID != nil {
		localVarHeaderParams["X-Neem-ID"] = parameterToString(*r.xNeemID, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiApiV1WalletsValidateOtpPostRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	xNeemPartnerId *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiApiV1WalletsValidateOtpPostRequest) XNeemPartnerId(xNeemPartnerId string) ApiApiV1WalletsValidateOtpPostRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiApiV1WalletsValidateOtpPostRequest) ContentType(contentType string) ApiApiV1WalletsValidateOtpPostRequest {
	r.contentType = &contentType
	return r
}

func (r ApiApiV1WalletsValidateOtpPostRequest) Body(body map[string]interface{}) ApiApiV1WalletsValidateOtpPostRequest {
	r.body = &body
	return r
}

func (r ApiApiV1WalletsValidateOtpPostRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ApiV1WalletsValidateOtpPostExecute(r)
}

/*
ApiV1WalletsValidateOtpPost Validate OTP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiApiV1WalletsValidateOtpPostRequest
*/
func (a *WalletServicesApiService) ApiV1WalletsValidateOtpPost(ctx context.Context) ApiApiV1WalletsValidateOtpPostRequest {
	return ApiApiV1WalletsValidateOtpPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) ApiV1WalletsValidateOtpPostExecute(r ApiApiV1WalletsValidateOtpPostRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.ApiV1WalletsValidateOtpPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/validate-otp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBalanceInquiryRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	walletId int32
	xNeemPartnerId *string
	xNeemID *string
	endToEndIdentification *int32
	schemeName *string
	extendedProperties *[]map[string]interface{}
}

func (r ApiBalanceInquiryRequest) XNeemPartnerId(xNeemPartnerId string) ApiBalanceInquiryRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiBalanceInquiryRequest) XNeemID(xNeemID string) ApiBalanceInquiryRequest {
	r.xNeemID = &xNeemID
	return r
}

func (r ApiBalanceInquiryRequest) EndToEndIdentification(endToEndIdentification int32) ApiBalanceInquiryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiBalanceInquiryRequest) SchemeName(schemeName string) ApiBalanceInquiryRequest {
	r.schemeName = &schemeName
	return r
}

func (r ApiBalanceInquiryRequest) ExtendedProperties(extendedProperties []map[string]interface{}) ApiBalanceInquiryRequest {
	r.extendedProperties = &extendedProperties
	return r
}

func (r ApiBalanceInquiryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.BalanceInquiryExecute(r)
}

/*
BalanceInquiry Balance Inquiry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiBalanceInquiryRequest
*/
func (a *WalletServicesApiService) BalanceInquiry(ctx context.Context, walletId int32) ApiBalanceInquiryRequest {
	return ApiBalanceInquiryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) BalanceInquiryExecute(r ApiBalanceInquiryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.BalanceInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/balance/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endToEndIdentification != nil {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	}
	if r.schemeName != nil {
		localVarQueryParams.Add("schemeName", parameterToString(*r.schemeName, ""))
	}
	if r.extendedProperties != nil {
		t := *r.extendedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("extendedProperties", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("extendedProperties", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemID != nil {
		localVarHeaderParams["X-Neem-ID"] = parameterToString(*r.xNeemID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiChangeMpinRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	walletId string
	xNeemPartnerId *string
	xNeemID *string
	xNeemOTP *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiChangeMpinRequest) XNeemPartnerId(xNeemPartnerId string) ApiChangeMpinRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiChangeMpinRequest) XNeemID(xNeemID string) ApiChangeMpinRequest {
	r.xNeemID = &xNeemID
	return r
}

func (r ApiChangeMpinRequest) XNeemOTP(xNeemOTP string) ApiChangeMpinRequest {
	r.xNeemOTP = &xNeemOTP
	return r
}

func (r ApiChangeMpinRequest) ContentType(contentType string) ApiChangeMpinRequest {
	r.contentType = &contentType
	return r
}

func (r ApiChangeMpinRequest) Body(body map[string]interface{}) ApiChangeMpinRequest {
	r.body = &body
	return r
}

func (r ApiChangeMpinRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.ChangeMpinExecute(r)
}

/*
ChangeMpin Change MPIN

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiChangeMpinRequest
*/
func (a *WalletServicesApiService) ChangeMpin(ctx context.Context, walletId string) ApiChangeMpinRequest {
	return ApiChangeMpinRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) ChangeMpinExecute(r ApiChangeMpinRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.ChangeMpin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/change-mpin/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemID != nil {
		localVarHeaderParams["X-Neem-ID"] = parameterToString(*r.xNeemID, "")
	}
	if r.xNeemOTP != nil {
		localVarHeaderParams["X-Neem-OTP"] = parameterToString(*r.xNeemOTP, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInitiateOtpRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	xNeemPartnerId *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiInitiateOtpRequest) XNeemPartnerId(xNeemPartnerId string) ApiInitiateOtpRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiInitiateOtpRequest) ContentType(contentType string) ApiInitiateOtpRequest {
	r.contentType = &contentType
	return r
}

func (r ApiInitiateOtpRequest) Body(body map[string]interface{}) ApiInitiateOtpRequest {
	r.body = &body
	return r
}

func (r ApiInitiateOtpRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.InitiateOtpExecute(r)
}

/*
InitiateOtp Initiate OTP

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInitiateOtpRequest
*/
func (a *WalletServicesApiService) InitiateOtp(ctx context.Context) ApiInitiateOtpRequest {
	return ApiInitiateOtpRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) InitiateOtpExecute(r ApiInitiateOtpRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.InitiateOtp")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/initiate-otp"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiTransactionHistoryRequest struct {
	ctx context.Context
	ApiService *WalletServicesApiService
	walletId int32
	xNeemPartnerId *string
	xNeemID *string
	endToEndIdentification *int32
	schemeName *int32
	fromDate *string
	toDate *string
	extendedProperties *[]map[string]interface{}
}

func (r ApiTransactionHistoryRequest) XNeemPartnerId(xNeemPartnerId string) ApiTransactionHistoryRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiTransactionHistoryRequest) XNeemID(xNeemID string) ApiTransactionHistoryRequest {
	r.xNeemID = &xNeemID
	return r
}

func (r ApiTransactionHistoryRequest) EndToEndIdentification(endToEndIdentification int32) ApiTransactionHistoryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiTransactionHistoryRequest) SchemeName(schemeName int32) ApiTransactionHistoryRequest {
	r.schemeName = &schemeName
	return r
}

func (r ApiTransactionHistoryRequest) FromDate(fromDate string) ApiTransactionHistoryRequest {
	r.fromDate = &fromDate
	return r
}

func (r ApiTransactionHistoryRequest) ToDate(toDate string) ApiTransactionHistoryRequest {
	r.toDate = &toDate
	return r
}

func (r ApiTransactionHistoryRequest) ExtendedProperties(extendedProperties []map[string]interface{}) ApiTransactionHistoryRequest {
	r.extendedProperties = &extendedProperties
	return r
}

func (r ApiTransactionHistoryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.TransactionHistoryExecute(r)
}

/*
TransactionHistory Transaction History

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiTransactionHistoryRequest
*/
func (a *WalletServicesApiService) TransactionHistory(ctx context.Context, walletId int32) ApiTransactionHistoryRequest {
	return ApiTransactionHistoryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *WalletServicesApiService) TransactionHistoryExecute(r ApiTransactionHistoryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WalletServicesApiService.TransactionHistory")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/transaction-history/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.endToEndIdentification != nil {
		localVarQueryParams.Add("endToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	}
	if r.schemeName != nil {
		localVarQueryParams.Add("schemeName", parameterToString(*r.schemeName, ""))
	}
	if r.fromDate != nil {
		localVarQueryParams.Add("fromDate", parameterToString(*r.fromDate, ""))
	}
	if r.toDate != nil {
		localVarQueryParams.Add("toDate", parameterToString(*r.toDate, ""))
	}
	if r.extendedProperties != nil {
		t := *r.extendedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("extendedProperties", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("extendedProperties", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemID != nil {
		localVarHeaderParams["X-Neem-ID"] = parameterToString(*r.xNeemID, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
Wallet

Integrate Neem Wallet APIs into your ecosystem to provide your customer the ability to create wallets, set up a financial PIN, ability to manage their wallets and have on request visibility over their balances.

API version: 1.0.3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DepositWithdrawApiService DepositWithdrawApi service
type DepositWithdrawApiService service

type ApiCashInRequest struct {
	ctx context.Context
	ApiService *DepositWithdrawApiService
	walletId string
	xNeemPartnerId *string
	xNeemID *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiCashInRequest) XNeemPartnerId(xNeemPartnerId string) ApiCashInRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiCashInRequest) XNeemID(xNeemID string) ApiCashInRequest {
	r.xNeemID = &xNeemID
	return r
}

func (r ApiCashInRequest) ContentType(contentType string) ApiCashInRequest {
	r.contentType = &contentType
	return r
}

func (r ApiCashInRequest) Body(body map[string]interface{}) ApiCashInRequest {
	r.body = &body
	return r
}

func (r ApiCashInRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CashInExecute(r)
}

/*
CashIn Cash In

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiCashInRequest
*/
func (a *DepositWithdrawApiService) CashIn(ctx context.Context, walletId string) ApiCashInRequest {
	return ApiCashInRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DepositWithdrawApiService) CashInExecute(r ApiCashInRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositWithdrawApiService.CashIn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/cash-in/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemID != nil {
		localVarHeaderParams["X-Neem-ID"] = parameterToString(*r.xNeemID, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCashInInquiryRequest struct {
	ctx context.Context
	ApiService *DepositWithdrawApiService
	walletId string
	endToEndIdentification *string
	amount *string
	currency *string
	extendedProperties *[]map[string]interface{}
}

func (r ApiCashInInquiryRequest) EndToEndIdentification(endToEndIdentification string) ApiCashInInquiryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiCashInInquiryRequest) Amount(amount string) ApiCashInInquiryRequest {
	r.amount = &amount
	return r
}

func (r ApiCashInInquiryRequest) Currency(currency string) ApiCashInInquiryRequest {
	r.currency = &currency
	return r
}

func (r ApiCashInInquiryRequest) ExtendedProperties(extendedProperties []map[string]interface{}) ApiCashInInquiryRequest {
	r.extendedProperties = &extendedProperties
	return r
}

func (r ApiCashInInquiryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CashInInquiryExecute(r)
}

/*
CashInInquiry Cash In Inquiry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiCashInInquiryRequest
*/
func (a *DepositWithdrawApiService) CashInInquiry(ctx context.Context, walletId string) ApiCashInInquiryRequest {
	return ApiCashInInquiryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DepositWithdrawApiService) CashInInquiryExecute(r ApiCashInInquiryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositWithdrawApiService.CashInInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/cash-in/inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endToEndIdentification == nil {
		return localVarReturnValue, nil, reportError("endToEndIdentification is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	localVarQueryParams.Add("EndToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	localVarQueryParams.Add("Amount", parameterToString(*r.amount, ""))
	if r.currency != nil {
		localVarQueryParams.Add("Currency", parameterToString(*r.currency, ""))
	}
	if r.extendedProperties != nil {
		t := *r.extendedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ExtendedProperties", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ExtendedProperties", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCashOutRequest struct {
	ctx context.Context
	ApiService *DepositWithdrawApiService
	walletId string
	xNeemPartnerId *string
	xNeemNonce *string
	xNeemOTPCode *string
	contentType *string
	body *map[string]interface{}
}

func (r ApiCashOutRequest) XNeemPartnerId(xNeemPartnerId string) ApiCashOutRequest {
	r.xNeemPartnerId = &xNeemPartnerId
	return r
}

func (r ApiCashOutRequest) XNeemNonce(xNeemNonce string) ApiCashOutRequest {
	r.xNeemNonce = &xNeemNonce
	return r
}

func (r ApiCashOutRequest) XNeemOTPCode(xNeemOTPCode string) ApiCashOutRequest {
	r.xNeemOTPCode = &xNeemOTPCode
	return r
}

func (r ApiCashOutRequest) ContentType(contentType string) ApiCashOutRequest {
	r.contentType = &contentType
	return r
}

func (r ApiCashOutRequest) Body(body map[string]interface{}) ApiCashOutRequest {
	r.body = &body
	return r
}

func (r ApiCashOutRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CashOutExecute(r)
}

/*
CashOut Cash Out

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiCashOutRequest
*/
func (a *DepositWithdrawApiService) CashOut(ctx context.Context, walletId string) ApiCashOutRequest {
	return ApiCashOutRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DepositWithdrawApiService) CashOutExecute(r ApiCashOutRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositWithdrawApiService.CashOut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/cash-out/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.xNeemPartnerId != nil {
		localVarHeaderParams["X-Neem-Partner-Id"] = parameterToString(*r.xNeemPartnerId, "")
	}
	if r.xNeemNonce != nil {
		localVarHeaderParams["X-Neem-Nonce"] = parameterToString(*r.xNeemNonce, "")
	}
	if r.xNeemOTPCode != nil {
		localVarHeaderParams["X-Neem-OTP-Code"] = parameterToString(*r.xNeemOTPCode, "")
	}
	if r.contentType != nil {
		localVarHeaderParams["Content-Type"] = parameterToString(*r.contentType, "")
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCashOutInquiryRequest struct {
	ctx context.Context
	ApiService *DepositWithdrawApiService
	walletId string
	endToEndIdentification *string
	amount *string
	currency *string
	extendedProperties *[]map[string]interface{}
}

func (r ApiCashOutInquiryRequest) EndToEndIdentification(endToEndIdentification string) ApiCashOutInquiryRequest {
	r.endToEndIdentification = &endToEndIdentification
	return r
}

func (r ApiCashOutInquiryRequest) Amount(amount string) ApiCashOutInquiryRequest {
	r.amount = &amount
	return r
}

func (r ApiCashOutInquiryRequest) Currency(currency string) ApiCashOutInquiryRequest {
	r.currency = &currency
	return r
}

func (r ApiCashOutInquiryRequest) ExtendedProperties(extendedProperties []map[string]interface{}) ApiCashOutInquiryRequest {
	r.extendedProperties = &extendedProperties
	return r
}

func (r ApiCashOutInquiryRequest) Execute() (map[string]interface{}, *http.Response, error) {
	return r.ApiService.CashOutInquiryExecute(r)
}

/*
CashOutInquiry Cash Out Inquiry

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param walletId
 @return ApiCashOutInquiryRequest
*/
func (a *DepositWithdrawApiService) CashOutInquiry(ctx context.Context, walletId string) ApiCashOutInquiryRequest {
	return ApiCashOutInquiryRequest{
		ApiService: a,
		ctx: ctx,
		walletId: walletId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DepositWithdrawApiService) CashOutInquiryExecute(r ApiCashOutInquiryRequest) (map[string]interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DepositWithdrawApiService.CashOutInquiry")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v1/wallets/cash-out/inquiry/{walletId}"
	localVarPath = strings.Replace(localVarPath, "{"+"walletId"+"}", url.PathEscape(parameterToString(r.walletId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.endToEndIdentification == nil {
		return localVarReturnValue, nil, reportError("endToEndIdentification is required and must be specified")
	}
	if r.amount == nil {
		return localVarReturnValue, nil, reportError("amount is required and must be specified")
	}

	localVarQueryParams.Add("EndToEndIdentification", parameterToString(*r.endToEndIdentification, ""))
	localVarQueryParams.Add("Amount", parameterToString(*r.amount, ""))
	if r.currency != nil {
		localVarQueryParams.Add("Currency", parameterToString(*r.currency, ""))
	}
	if r.extendedProperties != nil {
		t := *r.extendedProperties
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("ExtendedProperties", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("ExtendedProperties", parameterToString(t, "multi"))
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
